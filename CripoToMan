if not game:IsLoaded() then game.Loaded:Wait() end
repeat task.wait() until game:GetService("Players").LocalPlayer

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Player = Players.LocalPlayer

-- CONFIG
local SCAN_DURATION = 10 -- segundos de escaneo total
local SCAN_INTERVAL = 0.1 -- revisa cada 0.1s para no perder nada

local WEBHOOK_URLS = {
    ["10m"] = "https://discord.com/api/webhooks/1425192989155917857/KApEnVW2TNn3RCcPF-VJQNDyZTshcXWxav_mKXl3LIKleivJTVFOYx9PjVl1lUvzv2cg",
    ["50m"] = "https://discord.com/api/webhooks/1425192997527621714/AC1q5JRXZcyzLz0CPFWGl6EnYt3dwKj_cl4fCwTJRZidY6G0k1ZuvQoreofd2BP0S0fy",
    ["100m"] = "https://discord.com/api/webhooks/1425193000954236949/nZNdXypM03Oh7QOSU4nWZJmN-SA3i7jGSvpKuqVVIiEpe2iJ8FFW8FmDKFuXgpyvDdqQ",
    ["300m"] = "https://discord.com/api/webhooks/1425193003571609723/z-QsxJLU6U4FzUZ5IxK7y2h1RKsFF2ovcc2O9ew_v-WQzlZ7M9Qd8IaHAH5hts9_7Jbi"
}

local ROLE_MENTIONS = {
    ["10m"] = "<@&1425222603567530098>",
    ["50m"] = "<@&1425222834808164412>",
    ["100m"] = "<@&1425222874087686154>",
    ["300m"] = "<@&1425222652271923230>"
}

-- LOGGING
local function log(level, msg)
    print(string.format("[%s][%s] %s", os.date("%H:%M:%S"), string.upper(level), msg))
end

-- PARSE MONEY/S
local function parseGeneration(genStr)
    if not genStr then return 0 end
    genStr = string.gsub(genStr, "[%$,/s]", "")
    genStr = string.upper(genStr)
    local number, suffix = string.match(genStr, "([%d%.]+)([KMB]?)")
    number = tonumber(number) or 0
    if suffix == "K" then number *= 1e3
    elseif suffix == "M" then number *= 1e6
    elseif suffix == "B" then number *= 1e9 end
    return number
end

local function determineTier(value)
    if value >= 10000000 and value < 50000000 then
        return "10m"
    elseif value >= 50000000 and value < 100000000 then
        return "50m"
    elseif value >= 100000000 and value < 300000000 then
        return "100m"
    elseif value >= 300000000 then
        return "300m"
    else
        return nil
    end
end

-- WEBHOOK
local function sendToWebhook(name, gen)
    local value = parseGeneration(gen)
    local tier = determineTier(value)
    if not tier then return end

    local webhookUrl = WEBHOOK_URLS[tier]
    local mention = ROLE_MENTIONS[tier]
    if not webhookUrl then return end

    local embed = {
        title = "üê∑ Brainrot Detectado",
        color = 65280,
        fields = {
            { name = "Nombre", value = "```" .. name .. "```", inline = true },
            { name = "Money/s", value = "```" .. gen .. "```", inline = true },
            { name = "Jugadores", value = "```" .. tostring(#Players:GetPlayers()) .. "/8```", inline = true },
            { name = "Job ID", value = "```" .. game.JobId .. "```" }
        },
        footer = { text = "¬© CripoToMan - Auto Notifier" }
    }

    local payload = { content = mention, embeds = {embed} }

    local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
    if request then
        request({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(payload)
        })
    end
end

-- ESCANEO MEJORADO
local function scanPlots()
    log("info", "üîç Escaneando todos los plots durante " .. SCAN_DURATION .. "s...")
    local startTime = tick()
    local sent = {}
    local total = 0

    while tick() - startTime < SCAN_DURATION do
        local plots = Workspace:FindFirstChild("Plots")
        if plots then
            for _, desc in ipairs(plots:GetDescendants()) do
                if desc.Name == "AnimalOverhead" then
                    local display = desc:FindFirstChild("DisplayName")
                    local generation = desc:FindFirstChild("Generation")
                    if display and generation and display:IsA("TextLabel") and generation:IsA("TextLabel") then
                        local name = display.Text ~= "" and display.Text or display.ContentText
                        local gen = generation.Text ~= "" and generation.Text or generation.ContentText
                        if name and gen and gen:find("/s") then
                            local key = name .. "_" .. gen
                            if not sent[key] then
                                sent[key] = true
                                total += 1
                                log("info", "üí° Detectado: " .. name .. " | " .. gen)
                                sendToWebhook(name, gen)
                            end
                        end
                    end
                end
            end
        end
        task.wait(SCAN_INTERVAL)
    end
    log("info", "‚úÖ Escaneo completado. Se detectaron " .. total .. " brainrots √∫nicos.")
end

-- SERVER HOP
local API_URL = "https://api-skidded-skidded.up.railway.app/get-server"
local PLACE_ID = 109983668079237
local attempt = 0

local function Parse_JSON(url)
    local req = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
    if not req then return nil end
    local resp = req({Url = url, Method = "GET"})
    if resp and resp.Body then
        local ok, data = pcall(function() return HttpService:JSONDecode(resp.Body) end)
        if ok and data and data.job_id then return data.job_id end
    end
    return nil
end

local function Teleport_To_Server()
    attempt += 1
    log("info", "üåç Buscando nuevo servidor... (Intento " .. attempt .. ")")
    local jobId = Parse_JSON(API_URL)
    if jobId then
        log("info", "üöÄ Teletransportando al JobID: " .. jobId)
        local ok, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(PLACE_ID, jobId, Player)
        end)
        if not ok then
            warn("[Error Teleport]: " .. tostring(err))
            task.wait(1)
            Teleport_To_Server()
        end
    else
        warn("‚ùå No se pudo obtener JobID, reintentando...")
        task.wait(2)
        Teleport_To_Server()
    end
end

TeleportService.TeleportInitFailed:Connect(function()
    warn("‚ö†Ô∏è Teleport fallido, reintentando...")
    task.wait(1)
    Teleport_To_Server()
end)

-- MAIN
local function main()
    log("info", "‚åõ Esperando 5 segundos antes del escaneo...")
    task.wait(5)
    scanPlots()
    log("info", "üïí Escaneo terminado, iniciando server hop...")
    Teleport_To_Server()
end

main()
